@page "/contact/{Id:int}"
@using Data
@inject NavigationManager Nav
@inject IContactData db


@if (contact == null)
{
	<p>Loading...</p>
} else
{
	if (editVisible == false)
	{
		<h3>@contact.Name</h3>
		<h6>@contact.Number</h6>
		<br />
		<button class="btn btn-primary" @onclick="@ToggleEdit">Edit contact</button>
		<br />
	}
	else
	{
		<EditForm Model="@contactDisplayModel" OnValidSubmit="UpdateContact">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

    <div class="mb-3 col-3"> 
        <label for="ContactName" class="form-label">Contact Name</label>
        <InputText id="ContactName" placeholder="@contact.Name" class="form-control" @bind-Value="contactDisplayModel.Name"/>
        <div id="nameHelp" class="form-text"></div>
    </div>

     <div class="mb-3 col-3"> 
        <label for="ContactNumber" class="form-label">Number</label>
        <InputText id="ContactNumber" p class="form-control" placeholder="@contact.Number" @bind-Value="contactDisplayModel.Number"/>
        <div id="nameHelp" class="form-text"></div>
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
		<br/>

	    <div>
        @if (Show)
        {
            <div class="popconfirm">
                @Message
                <button type="button" class="btn btn-warning" @onclick="() => Confirmation(false)">No</button>
                <button type="button" class="btn btn-primary" @onclick="() => Confirmation(true)">Yes</button>
            </div>

        }
        <button type="button" class="@Class" @onclick="ShowPop">@Title</button>
    </div>
</EditForm>

	}

	
}

@code {
	[Parameter]
	public int Id { get; set; }

	private ContactDisplayModel contactDisplayModel = new ContactDisplayModel();

	private bool editVisible = false;

	private void ToggleEdit() => editVisible = !editVisible;

	private ContactModel? contact;

	protected override async Task OnInitializedAsync() =>  contact = await db.GetContact(Id);

	private void UpdateContact()
	{
		ContactModel _upContact = new ContactModel()
			{
				Name = contactDisplayModel.Name,
				Number = contactDisplayModel.Number,
				Id = this.Id
			};

		if (contact != null)
		{
			contact.Name = contactDisplayModel.Name;
			contact.Number = contactDisplayModel.Number;
		}
		db.UpdateContact(_upContact);
		ToggleEdit();
	}	

	private void DeleteContact()
	{
		db.DeleteContact(Id);
	    Nav.NavigateTo("/contacts");
	}


	 public bool Show { get; set; }
     [Parameter] public string Title { get; set; } = "Delete";
     [Parameter] public string Class { get; set; } = "btn btn-danger";
     [Parameter] public string Message { get; set; } = "Are you sure?";
     [Parameter] public EventCallback<bool> ConfirmedChanged { get; set; }

        public async Task Confirmation(bool value)
        {
            Show = false;
			await db.DeleteContact(Id);
            await ConfirmedChanged.InvokeAsync(value);
			Nav.NavigateTo("/contacts");
        }

        public void ShowPop()
        {
            Show = true;
        }


}
